---
title: "Class06"
author: "Lucy Wang"
format: pdf
---

## R Functions

In this class we will work through the process of developing our own function for calculating average grades for fictional students in a fictional class.

We will start with a simplified version of the problem. Grade some vectors of student scores. We want to drop the lowest score and get the average.


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90) 
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)  
```

We can use the `mean` function to get the average.

```{r}
mean(student1)
```

We can find the smallest value with the `min()` function.

```{r}
min(student1)
```

*There is also the `which.min()` function. Let's see if this help:

```{r}
student1
```

```{r}
which.min(student1)
```

```{r}
student1[which.min(student1)]
```

```{r}
x <- 1:5
x
```

```{r}
x[4]
```

```{r}
x[-4]
```

```{r}
student1[-which.min(student1)]
```

```{r}
mean(student1[-which.min(student1)])
```

Now what about student2 ?

```{r}
student2
```

```{r}
mean(student2[-which.min(student2)])
```

```{r}
which.min(student2)
```

```{r}
student2[-which.min(student2)]
```

```{r}
mean(student2, na.rm = TRUE)
```

But `student3` gets more tricky...(*don't miss HW! makes life harder!*)

```{r}
student3
```

```{r}
mean(student3, na.rm = TRUE)
```

SUCKS! It **inflates** grades as it drops all the NAs before determining the mean...

Genius uses GOOGLE, tells me `is.na()`. Does it work?

```{r}
is.na(student3)
```

```{r}
student2
is.na(student2)
```

I can use a logical vector to index another vector.

```{r}
x <- 1:5
x[x>3]
```

```{r}
student2[is.na(student2)] <- 0
student2
```

```{r}
x <- student3
is.na(x)
x[is.na(x)] <- 0
x
```

```{r}
mean(x)
```

```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```

We have our working snippet of code! This is now going to be the body of our function.

All function in R have at least 3 things:

- A name (we pick)
- input arguments
- a body (the code that does the work)

```{r}
grade <- function(x){
  #mask NA to zero
  x[is.na(x)] <- 0
  #drop lowest value and get mean
  mean(x[-which.min(x)])
}
```

TRY

```{r}
grade(student1)
grade(student2)
grade(student3)
```


> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


```{r}
gradebook <-  read.csv("https://tinyurl.com/gradeinput",row.names = 1)
head(gradebook)
```

I can use the `apply()` function to *use* our existing `grade()` function on the gradebook.

How does `apply()` work?

```{r}
results <- apply(gradebook, 1, grade)
results
```

>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
which.max(results)
```

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
# A good way
hw <- apply(gradebook, 2, sum, na.rm = TRUE)
hw
which.min(hw)
```

```{r}
#Not a good way
which.min( apply(gradebook, 2, mean, na.rm = TRUE))
```

If I want to use the mean approach I will need to mask the `NA` (missing homeworks) to zero

```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
which.min ( apply(mask, 2, mean, na.rm = TRUE))
```


>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [100pt]

Here we are going to look at the correlation of each homework results (i.e. columns in the gradebook) with the overall grade of students from the course (in the `results` object obtained from using our `grade()` function)

```{r}
mask$hw4
```

I am going to use `cor()` function
```{r}
apply(mask, 2, cor, x = results)
```

>Q5. Make sure you save your Quarto document and can click the “Render” (or Rmark- down”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]

OK!

