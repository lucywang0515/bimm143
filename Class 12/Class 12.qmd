---
title: "Class 12"
author: "Lucy Wang"
format: html
---

# RNA-Seq data

## Bioconductor & DESeq2 setup

install packages `BiocManager`
install packages `DESeq2`

```{r}
library(BiocManager)
library(DESeq2)
```

## Import countData & colData
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
head(counts)
head(metadata)
```

> Q1. How many genes are in this dataset?

```{r}
dim(counts)
```
There are 38694 genes.

> Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex=="control")
```
There are 4 'control' cell lines.

## Toy differential gene expression

Find sample `id`, then calculate the mean counts per gene.
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

An Alternative way:
```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```


> Q3. How would you make the above code in either approach more robust?

The second one seems to be more convenient if there's more data.

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[ ,treated$id]
treated.mean <- rowSums( treated.counts )/4 
head(treated.mean)
```

Combine above data for `control` and `treated` into a dataframe

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

```{r}
colSums(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(x = meancounts[,1], y = meancounts[,2], xlab = "control", ylab = "treated")
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

We use `geom_point()`:
```{r}
library(ggplot2)
ggplot(meancounts) + aes(control.mean, treated.mean) +
  geom_point(alpha = 0.5)
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

Consulting `?plot.default`, shows that `log = "xy"` put both axes into log treated data
```{r}
plot(x = meancounts[,1], y = meancounts[,2], log = "xy", xlab = "control", ylab = "treated")
```

Calculate `log2foldchange` and add to `meancounts`
```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

Getting rid of the `0` expression genes to make log easier:
```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

`arr.ind = TRUE` tells which row has `0` value. `unique()` is to make sure not to count a row twice.

Filter values `>2` and `<-2`
```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind)
```

> Q10. Do you trust these results? Why or why not?

No. They are only log calculated values that don't carry any statistical meaning.  


## DESeq2 Analysis

```{r}
library(DESeq2)
citation("DESeq2")
```

Import Data

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts,
                              colData=metadata, 
                              design=~dex)

dds
```

Must first run `DESeq()` before seeing the `results()` , otherwise it would be an error
```{r}
dds <- DESeq(dds)
```

### Getting results

```{r}
res <- results(dds)
```

```{r}
#Convert to dataframe and view
res <- as.data.frame(res)
```

Summarizing...
```{r}
summary(res)
```

IF: Adjust alpha value
```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```


## Data Visualization

### Volcano plots
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

Adding reference lines...
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

Change colors of points in different position:
```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

Install `"EnhancedVolcano"`

```{r}
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

## Gene Annotation

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

-- What types of IDs can be translated from `org.Hs.eg.db` to `columns()` --

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(x = org.Hs.eg.db,
              column = "SYMBOL",
              keys = row.names(res),
              keytype = "ENSEMBL")
```

```{r}
res$entrez <- mapIds(x = org.Hs.eg.db,
              column = "ENTREZID",
              keys = row.names(res),
              keytype = "ENSEMBL")
```

# Pathway Analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez

head(foldchanges)
```

Now we can run the `gage()` analysis:
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

See results run by `gage()`:
```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)

```

```{r}
# Look at the first three up-regulated pathways
head(keggres$greater, 3)
```

Pull up highlighted pathways and show differentially expressed genes on the pathwa -- use 'hsa####' id to get from KEGG and `foldchange` vector to show the genes.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

Put the picture into document:
```{r}
!(hsa05310.pathview.png)
```








